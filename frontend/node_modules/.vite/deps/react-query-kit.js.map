{
  "version": 3,
  "sources": ["../../react-query-kit/src/utils.ts", "../../react-query-kit/src/createBaseQuery.ts", "../../react-query-kit/src/createQuery.ts", "../../react-query-kit/src/createSuspenseQuery.ts", "../../react-query-kit/src/createInfiniteQuery.ts", "../../react-query-kit/src/createSuspenseInfiniteQuery.ts", "../../react-query-kit/src/createMutation.ts", "../../react-query-kit/src/router.ts"],
  "sourcesContent": ["import * as TanstackReactQuery from '@tanstack/react-query'\nimport type { Query, QueryClient, QueryKey } from '@tanstack/react-query'\n\nimport type { Middleware } from './types'\n\nexport const ReactQuery = TanstackReactQuery\n\nexport const isV5 = !!ReactQuery.useSuspenseQuery\n\nexport const suspenseOptions = {\n  enabled: true,\n  suspense: true,\n  keepPreviousData: undefined,\n  useErrorBoundary: (_error: unknown, query: Query) =>\n    query.state.data === undefined,\n}\n\nexport const withMiddleware = (\n  hook: any,\n  defaultOptions: any,\n  type: 'queries' | 'mutations'\n) => {\n  return function useMiddleware(\n    options?: { client?: QueryClient; use?: Middleware[] },\n    queryClient?: QueryClient\n  ) {\n    const [uses, opts]: [Middleware[], any] = [\n      ReactQuery.useQueryClient(\n        // @ts-ignore Compatible with ReactQuery v4\n        isV5 ? queryClient : options\n      ).getDefaultOptions()[type],\n      defaultOptions,\n      options,\n    ].reduce(\n      ([u1, o1], { use: u2 = [], ...o2 } = {}) => [\n        [...u1, ...u2],\n        { ...o1, ...o2 },\n      ],\n      [[]]\n    )\n\n    return uses.reduceRight((next, use) => use(next), hook)(opts, queryClient)\n  }\n}\n\nexport const getKey = (queryKey: QueryKey, variables?: any): QueryKey => {\n  return variables === undefined ? queryKey : [...queryKey, variables]\n}\n", "import {\n  type QueryClient,\n  type QueryFunctionContext,\n  type UseBaseQueryOptions,\n  type UseInfiniteQueryOptions,\n} from '@tanstack/react-query'\n\nimport { ReactQuery, getKey as getFullKey, withMiddleware } from './utils'\n\ntype QueryBaseHookOptions = Omit<\n  UseBaseQueryOptions,\n  'queryKey' | 'queryFn'\n> & {\n  fetcher?: any\n  variables?: any\n}\n\nexport const createBaseQuery = (\n  defaultOptions: any,\n  useRQHook: (options: any, queryClient?: any) => any,\n  overrideOptions?: Partial<UseInfiniteQueryOptions>\n): any => {\n  if (process.env.NODE_ENV !== 'production') {\n    // @ts-ignore\n    if (defaultOptions.useDefaultOptions) {\n      console.error(\n        '[Bug] useDefaultOptions is not supported, please use middleware instead.'\n      )\n    }\n\n    // @ts-ignore\n    if (defaultOptions.queryFn) {\n      console.error(\n        '[Bug] queryFn is not supported, please use fetcher instead.'\n      )\n    }\n  }\n\n  const getQueryOptions = (fetcherFn: any, variables: any) => {\n    return {\n      queryFn:\n        variables && variables === ReactQuery.skipToken\n          ? ReactQuery.skipToken\n          : (context: QueryFunctionContext) => fetcherFn(variables, context),\n      queryKey: getFullKey(defaultOptions.queryKey, variables),\n    }\n  }\n\n  const getKey = (variables?: any) =>\n    getFullKey(defaultOptions.queryKey, variables)\n\n  const getOptions = (variables: any) => {\n    return {\n      ...defaultOptions,\n      ...getQueryOptions(defaultOptions.fetcher, variables),\n    }\n  }\n\n  const getFetchOptions = (variables: any) => {\n    return {\n      ...getQueryOptions(defaultOptions.fetcher, variables),\n      queryKeyHashFn: defaultOptions.queryKeyHashFn,\n      getPreviousPageParam: defaultOptions.getPreviousPageParam,\n      getNextPageParam: defaultOptions.getNextPageParam,\n      initialPageParam: defaultOptions.initialPageParam,\n    }\n  }\n\n  const useBaseHook = (\n    options: QueryBaseHookOptions,\n    queryClient?: QueryClient\n  ) => {\n    return useRQHook(\n      {\n        ...options,\n        ...getQueryOptions(options.fetcher, options.variables),\n        ...overrideOptions,\n      },\n      queryClient\n    )\n  }\n\n  return Object.assign(withMiddleware(useBaseHook, defaultOptions, 'queries'), {\n    fetcher: defaultOptions.fetcher,\n    getKey,\n    getOptions,\n    getFetchOptions,\n  })\n}\n", "import { createBaseQuery } from './createBaseQuery'\nimport type { CompatibleError, CreateQueryOptions, QueryHook } from './types'\nimport { ReactQuery } from './utils'\n\nexport function createQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError\n>(\n  options: CreateQueryOptions<TFnData, TVariables, TError>\n): QueryHook<TFnData, TVariables, TError> {\n  return createBaseQuery(options, ReactQuery.useQuery)\n}\n", "import { createBaseQuery } from './createBaseQuery'\nimport type {\n  CompatibleError,\n  CreateSuspenseQueryOptions,\n  SuspenseQueryHook,\n} from './types'\nimport { ReactQuery, isV5, suspenseOptions } from './utils'\n\nexport function createSuspenseQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError\n>(\n  options: CreateSuspenseQueryOptions<TFnData, TVariables, TError>\n): SuspenseQueryHook<TFnData, TVariables, TError> {\n  return isV5\n    ? createBaseQuery(options, ReactQuery.useSuspenseQuery)\n    : createBaseQuery(options, ReactQuery.useQuery, suspenseOptions)\n}\n", "import { createBaseQuery } from './createBaseQuery'\nimport type {\n  CompatibleError,\n  CreateInfiniteQueryOptions,\n  InfiniteQueryHook,\n} from './types'\nimport { ReactQuery } from './utils'\n\nexport function createInfiniteQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError,\n  TPageParam = number\n>(\n  options: CreateInfiniteQueryOptions<TFnData, TVariables, TError, TPageParam>\n): InfiniteQueryHook<TFnData, TVariables, TError, TPageParam> {\n  return createBaseQuery(options, ReactQuery.useInfiniteQuery)\n}\n", "import { createBaseQuery } from './createBaseQuery'\nimport type {\n  CompatibleError,\n  CreateSuspenseInfiniteQueryOptions,\n  SuspenseInfiniteQueryHook,\n} from './types'\nimport { ReactQuery, isV5, suspenseOptions } from './utils'\n\nexport function createSuspenseInfiniteQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError,\n  TPageParam = number\n>(\n  options: CreateSuspenseInfiniteQueryOptions<\n    TFnData,\n    TVariables,\n    TError,\n    TPageParam\n  >\n): SuspenseInfiniteQueryHook<TFnData, TVariables, TError, TPageParam> {\n  return isV5\n    ? createBaseQuery(options, ReactQuery.useSuspenseInfiniteQuery)\n    : createBaseQuery(options, ReactQuery.useInfiniteQuery, suspenseOptions)\n}\n", "import type {\n  CompatibleError,\n  CreateMutationOptions,\n  MutationHook,\n} from './types'\nimport { ReactQuery, withMiddleware } from './utils'\n\nexport function createMutation<\n  TData = unknown,\n  TVariables = void,\n  TError = CompatibleError,\n  TContext = unknown\n>(\n  defaultOptions: CreateMutationOptions<TData, TVariables, TError, TContext>\n): MutationHook<TData, TVariables, TError, TContext> {\n  return Object.assign(\n    withMiddleware(ReactQuery.useMutation, defaultOptions, 'mutations'),\n    {\n      getKey: () => defaultOptions.mutationKey,\n      getOptions: () => defaultOptions,\n      mutationFn: defaultOptions.mutationFn,\n    }\n  ) as MutationHook<TData, TVariables, TError, TContext>\n}\n", "import { QueryKey } from '@tanstack/react-query'\n\nimport { createInfiniteQuery } from './createInfiniteQuery'\nimport { createMutation } from './createMutation'\nimport { createQuery } from './createQuery'\nimport { createSuspenseInfiniteQuery } from './createSuspenseInfiniteQuery'\nimport { createSuspenseQuery } from './createSuspenseQuery'\nimport type {\n  CompatibleError,\n  CreateRouter,\n  RouterConfig,\n  RouterInfiniteQuery,\n  RouterInfiniteQueryOptions,\n  RouterMutation,\n  RouterMutationOptions,\n  RouterQuery,\n  RouterQueryOptions,\n} from './types'\n\nconst buildRouter = (keys: QueryKey, config: RouterConfig) => {\n  return Object.entries(config).reduce(\n    (acc, [key, opts]) => {\n      if (!opts._type) {\n        acc[key] = buildRouter([...keys, key], opts)\n      } else {\n        const options: any = {\n          ...opts,\n          [opts._type === `m` ? `mutationKey` : `queryKey`]: [...keys, key],\n        }\n\n        acc[key] =\n          opts._type === `m`\n            ? {\n                useMutation: createMutation(options),\n                ...createMutation(options),\n              }\n            : opts._type === `q`\n            ? {\n                useQuery: createQuery(options),\n                useSuspenseQuery: createSuspenseQuery(options),\n                ...createQuery(options),\n              }\n            : {\n                useInfiniteQuery: createInfiniteQuery(options),\n                useSuspenseInfiniteQuery: createSuspenseInfiniteQuery(options),\n                ...createInfiniteQuery(options),\n              }\n      }\n\n      return acc\n    },\n    {\n      getKey: () => keys,\n    } as any\n  )\n}\n\nexport const router = <TConfig extends RouterConfig>(\n  key: string | QueryKey,\n  config: TConfig\n): CreateRouter<TConfig> => {\n  return buildRouter(Array.isArray(key) ? key : [key], config)\n}\n\nfunction query<TFnData, TVariables = void, TError = CompatibleError>(\n  options: RouterQueryOptions<TFnData, TVariables, TError>\n) {\n  return {\n    ...options,\n    _type: 'q',\n  } as RouterQuery<TFnData, TVariables, TError>\n}\n\nfunction infiniteQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError,\n  TPageParam = number\n>(\n  options: RouterInfiniteQueryOptions<TFnData, TVariables, TError, TPageParam>\n) {\n  return { ...options, _type: 'inf' } as RouterInfiniteQuery<\n    TFnData,\n    TVariables,\n    TError,\n    TPageParam\n  >\n}\n\nfunction mutation<\n  TFnData = unknown,\n  TVariables = void,\n  TError = CompatibleError,\n  TContext = unknown\n>(options: RouterMutationOptions<TFnData, TVariables, TError, TContext>) {\n  return { ...options, _type: 'm' } as RouterMutation<\n    TFnData,\n    TVariables,\n    TError,\n    TContext\n  >\n}\n\nrouter.query = query\nrouter.infiniteQuery = infiniteQuery\nrouter.mutation = mutation\n"],
  "mappings": ";;;;;;;;AAKO,IAAMA,aAAaC;IAEbC,OAAO,CAAC,CAACF,WAAWG;AAE1B,IAAMC,kBAAkB;EAC7BC,SAAS;EACTC,UAAU;EACVC,kBAAkBC;EAClBC,kBAAkB,CAACC,QAAiBC,WAClCA,OAAMC,MAAMC,SAASL;AALM;AAQxB,IAAMM,iBAAiB,CAC5BC,MACAC,gBACAC,SACG;AACH,SAAO,SAASC,cACdC,SACAC,aACA;AACA,UAAM,CAACC,MAAMC,IAAP,IAAoC,CACxCtB,WAAWuB;;MAETrB,OAAOkB,cAAcD;IAFvB,EAGEK,kBAHF,EAGsBP,IAHtB,GAIAD,gBACAG,OANwC,EAOxCM,OACA,CAAC,CAACC,IAAIC,EAAL,GAAU;MAAEC,KAAKC,KAAK,CAAA;MAAI,GAAGC;IAAnB,IAA0B,CAAA,MAAO,CAC1C,CAAC,GAAGJ,IAAI,GAAGG,EAAX,GACA;MAAE,GAAGF;MAAI,GAAGG;IAAZ,CAF0C,GAI5C,CAAC,CAAA,CAAD,CAZwC;AAe1C,WAAOT,KAAKU,YAAY,CAACC,MAAMJ,QAAQA,IAAII,IAAD,GAAQjB,IAA3C,EAAiDO,MAAMF,WAAvD;;AAEV;IAEYa,SAAS,CAACC,UAAoBC,cAA8B;AACvE,SAAOA,cAAc3B,SAAY0B,WAAW,CAAC,GAAGA,UAAUC,SAAd;AAC7C;;;AC9BM,IAAMC,kBAAkB,CAC7BC,gBACAC,WACAC,oBACQ;AACR,MAAIC,MAAuC;AAEzC,QAAIH,eAAeI,mBAAmB;AACpCC,cAAQC,MACN,0EADF;IAGD;AAGD,QAAIN,eAAeO,SAAS;AAC1BF,cAAQC,MACN,6DADF;IAGD;EACF;AAED,QAAME,kBAAkB,CAACC,WAAgBC,cAAmB;AAC1D,WAAO;MACLH,SACEG,aAAaA,cAAcC,WAAWC,YAClCD,WAAWC,YACVC,aAAkCJ,UAAUC,WAAWG,OAAZ;MAClDC,UAAUC,OAAWf,eAAec,UAAUJ,SAA1B;;;AAIxB,QAAMM,WAAUN,eACdK,OAAWf,eAAec,UAAUJ,SAA1B;AAEZ,QAAMO,aAAcP,eAAmB;AACrC,WAAO;MACL,GAAGV;MACH,GAAGQ,gBAAgBR,eAAekB,SAASR,SAAzB;;;AAItB,QAAMS,kBAAmBT,eAAmB;AAC1C,WAAO;MACL,GAAGF,gBAAgBR,eAAekB,SAASR,SAAzB;MAClBU,gBAAgBpB,eAAeoB;MAC/BC,sBAAsBrB,eAAeqB;MACrCC,kBAAkBtB,eAAesB;MACjCC,kBAAkBvB,eAAeuB;;;AAIrC,QAAMC,cAAc,CAClBC,SACAC,gBACG;AACH,WAAOzB,UACL;MACE,GAAGwB;MACH,GAAGjB,gBAAgBiB,QAAQP,SAASO,QAAQf,SAA1B;MAClB,GAAGR;OAELwB,WANc;;AAUlB,SAAOC,OAAOC,OAAOC,eAAeL,aAAaxB,gBAAgB,SAA9B,GAA0C;IAC3EkB,SAASlB,eAAekB;YACxBF;IACAC;IACAE;EAJ2E,CAAtE;AAMR;;;ACpFM,SAASW,YAKdC,SACwC;AACxC,SAAOC,gBAAgBD,SAASE,WAAWC,QAArB;AACvB;;;ACJM,SAASC,oBAKdC,SACgD;AAChD,SAAOC,OACHC,gBAAgBF,SAASG,WAAWC,gBAArB,IACfF,gBAAgBF,SAASG,WAAWE,UAAUC,eAA/B;AACpB;;;ACVM,SAASC,oBAMdC,SAC4D;AAC5D,SAAOC,gBAAgBD,SAASE,WAAWC,gBAArB;AACvB;;;ACTM,SAASC,4BAMdC,SAMoE;AACpE,SAAOC,OACHC,gBAAgBF,SAASG,WAAWC,wBAArB,IACfF,gBAAgBF,SAASG,WAAWE,kBAAkBC,eAAvC;AACpB;;;ACjBM,SAASC,eAMdC,gBACmD;AACnD,SAAOC,OAAOC,OACZC,eAAeC,WAAWC,aAAaL,gBAAgB,WAAzC,GACd;IACEM,QAAQ,MAAMN,eAAeO;IAC7BC,YAAY,MAAMR;IAClBS,YAAYT,eAAeS;EAH7B,CAFK;AAQR;;;ACJD,IAAMC,cAAc,CAACC,MAAgBC,WAAyB;AAC5D,SAAOC,OAAOC,QAAQF,MAAf,EAAuBG,OAC5B,CAACC,KAAK,CAACC,KAAKC,IAAN,MAAgB;AACpB,QAAI,CAACA,KAAKC,OAAO;AACfH,UAAIC,GAAD,IAAQP,YAAY,CAAC,GAAGC,MAAMM,GAAV,GAAgBC,IAAjB;IACvB,OAAM;AACL,YAAME,UAAe;QACnB,GAAGF;QACH,CAACA,KAAKC,UAAL,MAAA,gBAAA,UAAD,GAAmD,CAAC,GAAGR,MAAMM,GAAV;;AAGrDD,UAAIC,GAAD,IACDC,KAAKC,UACD,MAAA;QACEE,aAAaC,eAAeF,OAAD;QAC3B,GAAGE,eAAeF,OAAD;MAFnB,IAIAF,KAAKC,UACL,MAAA;QACEI,UAAUC,YAAYJ,OAAD;QACrBK,kBAAkBC,oBAAoBN,OAAD;QACrC,GAAGI,YAAYJ,OAAD;MAHhB,IAKA;QACEO,kBAAkBC,oBAAoBR,OAAD;QACrCS,0BAA0BC,4BAA4BV,OAAD;QACrD,GAAGQ,oBAAoBR,OAAD;;IAE/B;AAED,WAAOJ;EACR,GACD;IACEe,QAAQ,MAAMpB;EADhB,CA/BK;AAmCR;IAEYqB,SAAS,CACpBf,KACAL,WAC0B;AAC1B,SAAOF,YAAYuB,MAAMC,QAAQjB,GAAd,IAAqBA,MAAM,CAACA,GAAD,GAAOL,MAAnC;AACnB;AAED,SAASuB,MACPf,SACA;AACA,SAAO;IACL,GAAGA;IACHD,OAAO;;AAEV;AAED,SAASiB,cAMPhB,SACA;AACA,SAAO;IAAE,GAAGA;IAASD,OAAO;;AAM7B;AAED,SAASkB,SAKPjB,SAAuE;AACvE,SAAO;IAAE,GAAGA;IAASD,OAAO;;AAM7B;AAEDa,OAAOG,QAAQA;AACfH,OAAOI,gBAAgBA;AACvBJ,OAAOK,WAAWA;",
  "names": ["ReactQuery", "TanstackReactQuery", "isV5", "useSuspenseQuery", "suspenseOptions", "enabled", "suspense", "keepPreviousData", "undefined", "useErrorBoundary", "_error", "query", "state", "data", "withMiddleware", "hook", "defaultOptions", "type", "useMiddleware", "options", "queryClient", "uses", "opts", "useQueryClient", "getDefaultOptions", "reduce", "u1", "o1", "use", "u2", "o2", "reduceRight", "next", "getKey", "queryKey", "variables", "createBaseQuery", "defaultOptions", "useRQHook", "overrideOptions", "process", "useDefaultOptions", "console", "error", "queryFn", "getQueryOptions", "fetcherFn", "variables", "ReactQuery", "skipToken", "context", "queryKey", "getFullKey", "getKey", "getOptions", "fetcher", "getFetchOptions", "queryKeyHashFn", "getPreviousPageParam", "getNextPageParam", "initialPageParam", "useBaseHook", "options", "queryClient", "Object", "assign", "withMiddleware", "createQuery", "options", "createBaseQuery", "ReactQuery", "useQuery", "createSuspenseQuery", "options", "isV5", "createBaseQuery", "ReactQuery", "useSuspenseQuery", "useQuery", "suspenseOptions", "createInfiniteQuery", "options", "createBaseQuery", "ReactQuery", "useInfiniteQuery", "createSuspenseInfiniteQuery", "options", "isV5", "createBaseQuery", "ReactQuery", "useSuspenseInfiniteQuery", "useInfiniteQuery", "suspenseOptions", "createMutation", "defaultOptions", "Object", "assign", "withMiddleware", "ReactQuery", "useMutation", "getKey", "mutationKey", "getOptions", "mutationFn", "buildRouter", "keys", "config", "Object", "entries", "reduce", "acc", "key", "opts", "_type", "options", "useMutation", "createMutation", "useQuery", "createQuery", "useSuspenseQuery", "createSuspenseQuery", "useInfiniteQuery", "createInfiniteQuery", "useSuspenseInfiniteQuery", "createSuspenseInfiniteQuery", "getKey", "router", "Array", "isArray", "query", "infiniteQuery", "mutation"]
}
