import {
  modern_exports
} from "./chunk-2XFSCDTU.js";
import "./chunk-OBHQJEAR.js";
import "./chunk-6L6DU33K.js";
import "./chunk-4MBMRILA.js";

// node_modules/react-query-kit/build/lib/utils.mjs
var ReactQuery = modern_exports;
var isV5 = !!ReactQuery.useSuspenseQuery;
var suspenseOptions = {
  enabled: true,
  suspense: true,
  keepPreviousData: void 0,
  useErrorBoundary: (_error, query2) => query2.state.data === void 0
};
var withMiddleware = (hook, defaultOptions, type) => {
  return function useMiddleware(options, queryClient) {
    const [uses, opts] = [ReactQuery.useQueryClient(
      // @ts-ignore Compatible with ReactQuery v4
      isV5 ? queryClient : options
    ).getDefaultOptions()[type], defaultOptions, options].reduce(([u1, o1], {
      use: u2 = [],
      ...o2
    } = {}) => [[...u1, ...u2], {
      ...o1,
      ...o2
    }], [[]]);
    return uses.reduceRight((next, use) => use(next), hook)(opts, queryClient);
  };
};
var getKey = (queryKey, variables) => {
  return variables === void 0 ? queryKey : [...queryKey, variables];
};

// node_modules/react-query-kit/build/lib/createBaseQuery.mjs
var createBaseQuery = (defaultOptions, useRQHook, overrideOptions) => {
  if (true) {
    if (defaultOptions.useDefaultOptions) {
      console.error("[Bug] useDefaultOptions is not supported, please use middleware instead.");
    }
    if (defaultOptions.queryFn) {
      console.error("[Bug] queryFn is not supported, please use fetcher instead.");
    }
  }
  const getQueryOptions = (fetcherFn, variables) => {
    return {
      queryFn: variables && variables === ReactQuery.skipToken ? ReactQuery.skipToken : (context) => fetcherFn(variables, context),
      queryKey: getKey(defaultOptions.queryKey, variables)
    };
  };
  const getKey$1 = (variables) => getKey(defaultOptions.queryKey, variables);
  const getOptions = (variables) => {
    return {
      ...defaultOptions,
      ...getQueryOptions(defaultOptions.fetcher, variables)
    };
  };
  const getFetchOptions = (variables) => {
    return {
      ...getQueryOptions(defaultOptions.fetcher, variables),
      queryKeyHashFn: defaultOptions.queryKeyHashFn,
      getPreviousPageParam: defaultOptions.getPreviousPageParam,
      getNextPageParam: defaultOptions.getNextPageParam,
      initialPageParam: defaultOptions.initialPageParam
    };
  };
  const useBaseHook = (options, queryClient) => {
    return useRQHook({
      ...options,
      ...getQueryOptions(options.fetcher, options.variables),
      ...overrideOptions
    }, queryClient);
  };
  return Object.assign(withMiddleware(useBaseHook, defaultOptions, "queries"), {
    fetcher: defaultOptions.fetcher,
    getKey: getKey$1,
    getOptions,
    getFetchOptions
  });
};

// node_modules/react-query-kit/build/lib/createQuery.mjs
function createQuery(options) {
  return createBaseQuery(options, ReactQuery.useQuery);
}

// node_modules/react-query-kit/build/lib/createSuspenseQuery.mjs
function createSuspenseQuery(options) {
  return isV5 ? createBaseQuery(options, ReactQuery.useSuspenseQuery) : createBaseQuery(options, ReactQuery.useQuery, suspenseOptions);
}

// node_modules/react-query-kit/build/lib/createInfiniteQuery.mjs
function createInfiniteQuery(options) {
  return createBaseQuery(options, ReactQuery.useInfiniteQuery);
}

// node_modules/react-query-kit/build/lib/createSuspenseInfiniteQuery.mjs
function createSuspenseInfiniteQuery(options) {
  return isV5 ? createBaseQuery(options, ReactQuery.useSuspenseInfiniteQuery) : createBaseQuery(options, ReactQuery.useInfiniteQuery, suspenseOptions);
}

// node_modules/react-query-kit/build/lib/createMutation.mjs
function createMutation(defaultOptions) {
  return Object.assign(withMiddleware(ReactQuery.useMutation, defaultOptions, "mutations"), {
    getKey: () => defaultOptions.mutationKey,
    getOptions: () => defaultOptions,
    mutationFn: defaultOptions.mutationFn
  });
}

// node_modules/react-query-kit/build/lib/router.mjs
var buildRouter = (keys, config) => {
  return Object.entries(config).reduce((acc, [key, opts]) => {
    if (!opts._type) {
      acc[key] = buildRouter([...keys, key], opts);
    } else {
      const options = {
        ...opts,
        [opts._type === "m" ? "mutationKey" : "queryKey"]: [...keys, key]
      };
      acc[key] = opts._type === "m" ? {
        useMutation: createMutation(options),
        ...createMutation(options)
      } : opts._type === "q" ? {
        useQuery: createQuery(options),
        useSuspenseQuery: createSuspenseQuery(options),
        ...createQuery(options)
      } : {
        useInfiniteQuery: createInfiniteQuery(options),
        useSuspenseInfiniteQuery: createSuspenseInfiniteQuery(options),
        ...createInfiniteQuery(options)
      };
    }
    return acc;
  }, {
    getKey: () => keys
  });
};
var router = (key, config) => {
  return buildRouter(Array.isArray(key) ? key : [key], config);
};
function query(options) {
  return {
    ...options,
    _type: "q"
  };
}
function infiniteQuery(options) {
  return {
    ...options,
    _type: "inf"
  };
}
function mutation(options) {
  return {
    ...options,
    _type: "m"
  };
}
router.query = query;
router.infiniteQuery = infiniteQuery;
router.mutation = mutation;
export {
  createInfiniteQuery,
  createMutation,
  createQuery,
  createSuspenseInfiniteQuery,
  createSuspenseQuery,
  getKey,
  router
};
//# sourceMappingURL=react-query-kit.js.map
